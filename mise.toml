[tools]
aws = "latest"
"cargo:cargo-deny" = "0.17"

[env]
_.file = ".env.local"

[tasks.build]
run = '''
cargo build --all-features
'''

[tasks.ci]
depends = ["lint", "test", "check"]

[tasks.lint]
depends = ["build"]
run = '''
cargo fmt --all -- --check
cargo clippy --all-targets --all-features -- -D warnings
'''

[tasks.test]
depends = ["build"]
run = '''
cargo test --all
'''

[tasks.check]
depends = ["build"]
run = '''
cargo deny check
'''

[tasks."api:publish"]
run = '''
aws --version
aws s3 sync ./public/api s3://${AWS_S3_BUCKET}/ \
  --exclude "*.DS_Store" \
  --delete
curl -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
  -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
  -H "Content-Type: application/json" \
  --data "{\"hosts\":[\"${CLOUDFLARE_HOST}\"]}"
'''

[tasks."fetch"]
run = '''
cargo run -- fetch
'''

[tasks."fetch:vendor"]
usage = '''
arg <vendor> "Vendor to fetch (e.g. temurin)"
complete "vendor" run="cargo run -- ls vendor"
'''
run = '''
cargo run -- fetch {{arg(name="vendor")}}
'''

[tasks."export:mise"]
run = '''
cargo run -- export release-type \
          --pretty \
          -o 'linux,macosx,windows' \
          -a 'aarch64,arm32,i686,x86_64' \
          -e 'architecture,checksum_url,filename,os,release_type,size' \
          -f 'file_type=tar.gz,tar.xz,zip&image_type=jre,jdk&features=!certified,!debug,!fastdebug,!freetype'
'''

[tasks."export:release-type"]
run = '''
cargo run -- export release-type \
          --pretty \
          -o linux,macosx,windows \
          -a aarch64,arm32,i686,x86_64
'''

[tasks."export:vendor"]
run = '''
cargo run -- export vendor \
          --pretty \
          -o linux,macosx,windows \
          -a aarch64,arm32,i686,x86_64
'''

[tasks."db:dump"]
run = '''
if ! command -v pg_dump &> /dev/null; then
  echo "pg_dump not found, please install it (brew install libpq)"
  exit 1
fi

pg_dump \
--host=$ROAST_DB_HOST \
--port=$ROAST_DB_PORT \
--username=$ROAST_DB_USR \
--dbname=$ROAST_DB_NAME \
--format=plain | gzip > backup/"$(date -u +"%Y-%m-%dT%H.%M.%SZ")-roast.sql.gz"
'''

[tasks."db:restore"]
usage = '''
arg <file> "Backup .sql.gz file to restore"
complete "file" run="ls backup/*.sql.gz | sort -r"
'''
run = '''
if ! command -v psql &> /dev/null; then
  echo "psql not found, please install it (brew install libpq)"
  exit 1
fi

gunzip -c {{arg(name="file")}} | \
psql postgresql://$ROAST_DB_HOST:$ROAST_DB_PORT/$ROAST_DB_NAME \
--username=$ROAST_DB_USR \
--password
'''
